# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pixy
else:
    import _pixy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper

class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)

def pixy_init():
    return _pixy.pixy_init()

def pixy_close():
    return _pixy.pixy_close()

def pixy_error(error_code):
    return _pixy.pixy_error(error_code)

def pixy_blocks_are_new():
    return _pixy.pixy_blocks_are_new()

def pixy_get_blocks(max_blocks, blocks):
    return _pixy.pixy_get_blocks(max_blocks, blocks)

def pixy_rcs_set_position(channel, position):
    return _pixy.pixy_rcs_set_position(channel, position)

class Block(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pixy.Block_type_get, _pixy.Block_type_set)
    signature = property(_pixy.Block_signature_get, _pixy.Block_signature_set)
    x = property(_pixy.Block_x_get, _pixy.Block_x_set)
    y = property(_pixy.Block_y_get, _pixy.Block_y_set)
    width = property(_pixy.Block_width_get, _pixy.Block_width_set)
    height = property(_pixy.Block_height_get, _pixy.Block_height_set)
    angle = property(_pixy.Block_angle_get, _pixy.Block_angle_set)

    def __init__(self):
        _pixy.Block_swiginit(self, _pixy.new_Block())
    __swig_destroy__ = _pixy.delete_Block

# Register Block in _pixy:
_pixy.Block_swigregister(Block)



