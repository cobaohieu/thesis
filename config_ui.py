# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'configcolor.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

################## Import Modules ##################
import sys
import os
import datetime
import time
import numpy
import usb
import usb.core
import usb.util
import usb.backend.libusb1
import ctypes
import cv2
import argparse
import imutils
import PyQt5

import PyQt5.QtCore as QtCore
import PyQt5.QtDBus as QtDBus
import PyQt5.QtGui as QtGui
import PyQt5.QtWidgets as QtWidgets
import PyQt5.QtXml as QtXml

################## Import sub modules ##################
from time import gmtime, strftime
from PIL import Image
from imutils.video import VideoStream

from PyQt5.QtCore import (Qt, QSysInfo, QUrl, QMetaType, QSettings, QObject, QDir, QVariant, QIODevice, QThread, QMutex, QWaitCondition, QMutexLocker, QTime, QTimer, QFile, QAbstractItemModel, QModelIndex, QDataStream, QTextStream, pyqtSignal)

from PyQt5.QtGui import (QIcon, QFont, QImage, QPixmap, QDesktopServices, QColor, QPen, QPainter, QMouseEvent, QKeyEvent, QTextCursor, QTextBlock, QTransform, QPalette, QBrush, QTextFormat, QCloseEvent)

# from PyQt5.QtMultimedia import QVideoFrame, QVideoEncoderSettings, QVideoSurfaceFormat, QMediaContent, QMediaPlayer
# from PyQt5.QtMultimediaWidgets import QVideoWidget

from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QFileDialog, QInputDialog, QGraphicsRectItem, QGraphicsScene, QMessageBox, QMainWindow, QToolTip, QPushButton, QLineEdit, QDialog, QHBoxLayout, QSlider, QAbstractButton, QCheckBox, QTableWidget, QButtonGroup, QDialogButtonBox, QSpacerItem, QGridLayout, QAction, QHeaderView, QVBoxLayout, QTextBrowser, QSizePolicy, QStyle, QPlainTextEdit, QScrollBar, QTreeView,QAbstractItemDelegate, QAbstractItemView, QHeaderView, QStyleOptionFocusRect, QStyleOption, QStyleOptionFrame, QStyleOptionTabWidgetFrame, QStyleOptionTabBarBase, QStyleOptionHeader, QStyleOptionButton, QStyleOptionProgressBar, QStyleOptionToolBar, QStyleOptionViewItem, QStyleOptionComplex, QStyleOptionSlider, QStyleOptionGraphicsItem, QStyleOptionDockWidget, QStyleOptionSpinBox, QAbstractScrollArea, QStyleOptionGroupBox, QStyleOptionSizeGrip, QStyleOptionComboBox, QStyleOptionTitleBar, QDesktopWidget)

from PyQt5.QtXml import (QDomDocument, QDomElement)

from PyQt5.uic import loadUi

################## Class function ##################
class Communicate(QObject):
    updateBW = pyqtSignal(int)

class BlueSlider(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setMinimumSize(0, 30)
        self.value = 0
        self.num = [55, 105, 155, 205, 255]

    def setValue(self, value):
        self.value = value

    def paintEvent(self, e):
        qp = QPainter()
        qp.begin(self)
        self.drawWidget(qp)
        qp.end()

    def drawWidget(self, qp):
        MAX_CAPACITY = 255
        OVER_CAPACITY = 304

        font = QFont('Google Sans', 10, QFont.Light)
        qp.setFont(font)

        size = self.size()
        w = size.width()
        h = size.height()

        step = int(round(w / 6))

        till = int(((w / OVER_CAPACITY) * self.value))
        full = int(((w / OVER_CAPACITY) * MAX_CAPACITY))

        if self.value >= MAX_CAPACITY:
            qp.setPen(QColor(255, 255, 255))
            qp.setBrush(QColor(3, 54, 255))

            qp.drawRect(0, 0, full, h)
            qp.setPen(QColor(255, 175, 175))
            qp.setBrush(QColor(255, 175, 175))
            qp.drawRect(full, 0, till - full, h)

        else:
            qp.setPen(QColor(255, 255, 255))
            qp.setBrush(QColor(3, 54, 255))
            qp.drawRect(0, 0, till, h)

        pen = QPen(QColor(20, 20, 20), 0, Qt.SolidLine)

        qp.setPen(pen)
        qp.setBrush(Qt.NoBrush)
        qp.drawRect(0, 0, w - 1, h - 1)

        j = 0

        for i in range(step, 6 * step, step):
            qp.drawLine(i, 0, i, 5)
            metrics = qp.fontMetrics()
            fw = metrics.width(str(self.num[j]))

            x, y = int(i - fw/2), int(h / 2)
            qp.drawText(x, y, str(self.num[j]))
            j = j + 1

class GreenSlider(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setMinimumSize(0, 30)
        self.value = 0
        self.num = [55, 105, 155, 205, 255]

    def setValue(self, value):
        self.value = value

    def paintEvent(self, e):
        qp = QPainter()
        qp.begin(self)
        self.drawWidget(qp)
        qp.end()

    def drawWidget(self, qp):
        MAX_CAPACITY = 255
        OVER_CAPACITY = 304

        font = QFont('Google Sans', 10, QFont.Light)
        qp.setFont(font)

        size = self.size()
        w = size.width()
        h = size.height()

        step = int(round(w / 6))

        till = int(((w / OVER_CAPACITY) * self.value))
        full = int(((w / OVER_CAPACITY) * MAX_CAPACITY))

        if self.value >= MAX_CAPACITY:
            qp.setPen(QColor(255, 255, 255))
            qp.setBrush(QColor(1, 135, 134))

            qp.drawRect(0, 0, full, h)
            qp.setPen(QColor(255, 175, 175))
            qp.setBrush(QColor(255, 175, 175))
            qp.drawRect(full, 0, till - full, h)

        else:
            qp.setPen(QColor(255, 255, 255))
            qp.setBrush(QColor(1, 135, 134))
            qp.drawRect(0, 0, till, h)

        pen = QPen(QColor(20, 20, 20), 0, Qt.SolidLine)

        qp.setPen(pen)
        qp.setBrush(Qt.NoBrush)
        qp.drawRect(0, 0, w - 1, h - 1)

        j = 0

        for i in range(step, 6 * step, step):

            qp.drawLine(i, 0, i, 5)
            metrics = qp.fontMetrics()
            fw = metrics.width(str(self.num[j]))

            x, y = int(i - fw/2), int(h / 2)
            qp.drawText(x, y, str(self.num[j]))
            j = j + 1

class RedSlider(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setMinimumSize(0, 30)
        self.value = 0
        self.num = [55, 105, 155, 205, 255]

    def setValue(self, value):
        self.value = value

    def paintEvent(self, e):
        qp = QPainter()
        qp.begin(self)
        self.drawWidget(qp)
        qp.end()

    def drawWidget(self, qp):
        MAX_CAPACITY = 255
        OVER_CAPACITY = 304

        font = QFont('Google Sans', 10, QFont.Light)
        qp.setFont(font)

        size = self.size()
        w = size.width()
        h = size.height()

        step = int(round(w / 6))

        till = int(((w / OVER_CAPACITY) * self.value))
        full = int(((w / OVER_CAPACITY) * MAX_CAPACITY))

        if self.value >= MAX_CAPACITY:
            qp.setPen(QColor(255, 255, 255))
            qp.setBrush(QColor(176, 0, 32))

            qp.drawRect(0, 0, full, h)
            qp.setPen(QColor(255, 175, 175))
            qp.setBrush(QColor(255, 175, 175))
            qp.drawRect(full, 0, till - full, h)

        else:
            qp.setPen(QColor(255, 255, 255))
            qp.setBrush(QColor(176, 0, 32))
            qp.drawRect(0, 0, till, h)

        pen = QPen(QColor(20, 20, 20), 1, Qt.SolidLine)

        qp.setPen(pen)
        qp.setBrush(Qt.NoBrush)
        qp.drawRect(0, 0, w - 1, h - 1)

        j = 0

        for i in range(step, 6 * step, step):
            qp.drawLine(i, 0, i, 5)
            metrics = qp.fontMetrics()
            fw = metrics.width(str(self.num[j]))

            x, y = int(i - fw/2), int(h / 2)
            qp.drawText(x, y, str(self.num[j]))
            j = j + 1

class Ui_ConfigForm(object):
    def setupUi(self, ConfigForm):
        ConfigForm.setObjectName("ConfigForm")
        ConfigForm.resize(376, 352)
        OVER_CAPACITY = 255

        # ConfigForm.resize(376, 161)
        self.centralwidget = QtWidgets.QWidget(ConfigForm)
        self.centralwidget.setObjectName("centralwidget")

        ### tabWidget
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 375, 351))
        self.tabWidget.setObjectName("tabWidget")

        ### colorTab
        self.colorTab = QtWidgets.QWidget()
        self.colorTab.setObjectName("colorTab")

        ### gridLayout
        self.gridLayoutWidget = QtWidgets.QWidget(self.colorTab)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 371, 131))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        ### horizontalSlider_blue
        horizontalSlider_blue = QSlider(Qt.Horizontal, self)
        horizontalSlider_blue.setObjectName("horizontalSlider_blue")
        horizontalSlider_blue.setGeometry(50, 102, 255, 13)
        horizontalSlider_blue.setFocusPolicy(Qt.NoFocus)
        horizontalSlider_blue.setMaximum(255)
        horizontalSlider_blue.setRange(0, OVER_CAPACITY)
        horizontalSlider_blue.setValue(0)
        horizontalSlider_blue.valueChanged[int].connect(self.changeValueBlue)

        ### textBrowser_blue
        self.textBrowser_blue = QtWidgets.QTextBrowser(self.colorTab)
        self.textBrowser_blue.setGeometry(QtCore.QRect(310, 72, 51, 21))
        self.textBrowser_blue.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.textBrowser_blue.setLineWidth(0)
        self.textBrowser_blue.setMidLineWidth(0)
        self.textBrowser_blue.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.textBrowser_blue.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.textBrowser_blue.setTabChangesFocus(False)
        self.textBrowser_blue.setReadOnly(False)
        self.textBrowser_blue.setObjectName("textBrowser_blue")

        ### label_blue
        self.label_blue = QtWidgets.QLabel(self.colorTab)
        self.label_blue.setGeometry(QtCore.QRect(17, 72, 31, 21))
        self.label_blue.setObjectName("label_blue")

        ### horizontalSlider_green
        horizontalSlider_green = QSlider(Qt.Horizontal, self)
        horizontalSlider_green.setObjectName("horizontalSlider_green")
        horizontalSlider_green.setGeometry(50, 71, 255, 13)
        horizontalSlider_green.setFocusPolicy(Qt.NoFocus)
        horizontalSlider_green.setMaximum(255)
        horizontalSlider_green.setRange(0, OVER_CAPACITY)
        horizontalSlider_green.setValue(0)
        horizontalSlider_green.valueChanged[int].connect(self.changeValueGreen)

        ### textBrowser_green
        self.textBrowser_green = QtWidgets.QTextBrowser(self.colorTab)
        self.textBrowser_green.setGeometry(QtCore.QRect(310, 42, 51, 21))
        self.textBrowser_green.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.textBrowser_green.setLineWidth(0)
        self.textBrowser_green.setMidLineWidth(0)
        self.textBrowser_green.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.textBrowser_green.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.textBrowser_green.setTabChangesFocus(False)
        self.textBrowser_green.setReadOnly(False)
        self.textBrowser_green.setObjectName("textBrowser_green")

        ### label_green
        self.label_green = QtWidgets.QLabel(self.colorTab)
        self.label_green.setGeometry(QtCore.QRect(7, 42, 40, 21))
        self.label_green.setObjectName("label_green")

        ### horizontalSlider_red
        horizontalSlider_red = QSlider(Qt.Horizontal, self)
        horizontalSlider_red.setObjectName("horizontalSlider_red")
        horizontalSlider_red.setGeometry(50, 39, 255, 13)
        horizontalSlider_red.setFocusPolicy(Qt.NoFocus)
        horizontalSlider_red.setMaximum(255)
        horizontalSlider_red.setRange(0, OVER_CAPACITY)
        horizontalSlider_red.setValue(0)
        horizontalSlider_red.valueChanged[int].connect(self.changeValueRed)

        ### textBrowser_red
        self.textBrowser_red = QtWidgets.QTextBrowser(self.colorTab)
        self.textBrowser_red.setGeometry(QtCore.QRect(310, 10, 51, 21))
        self.textBrowser_red.setInputMethodHints(QtCore.Qt.ImhFormattedNumbersOnly)
        self.textBrowser_red.setLineWidth(0)
        self.textBrowser_red.setMidLineWidth(0)
        self.textBrowser_red.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.textBrowser_red.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.textBrowser_red.setTabChangesFocus(False)
        self.textBrowser_red.setReadOnly(False)
        self.textBrowser_red.setObjectName("textBrowser_red")

        ### label_red
        self.label_red = QtWidgets.QLabel(self.colorTab)
        self.label_red.setGeometry(QtCore.QRect(19, 10, 26, 21))
        self.label_red.setObjectName("label_red")

        ### Apply|Cancel Button
        self.ACButton = QtWidgets.QDialogButtonBox(self.colorTab)
        self.ACButton.setGeometry(QtCore.QRect(30, 297, 331, 28))
        self.ACButton.setOrientation(QtCore.Qt.Horizontal)
        self.ACButton.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Apply)
        self.ACButton.setObjectName("ACButton")

        # Button event
        # self.ACButton.clicked(ConfigForm.accept)
        self.ACButton.accepted.connect(self.button_apply_event)
        self.ACButton.rejected.connect(ConfigForm.reject)

	### New code
        self.c = Communicate()

        # blue
        self.widblue = BlueSlider()
        self.c.updateBW[int].connect(self.widblue.setValue)

        # green
        self.widgreen = GreenSlider()
        self.c.updateBW[int].connect(self.widgreen.setValue)

        # red
        self.widred = RedSlider()
        self.c.updateBW[int].connect(self.widred.setValue)

        # horizontalBox_Blue
        self.horizontalLayoutWidget_Blue = QtWidgets.QWidget(self.colorTab)
        self.horizontalLayoutWidget_Blue.setGeometry(QtCore.QRect(0, 240, 371, 31))
        self.horizontalLayoutWidget_Blue.setObjectName("horizontalLayoutWidget_Blue")
        horizontalBox_Blue = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_Blue)
        horizontalBox_Blue.setContentsMargins(0, 0, 0, 0)
        horizontalBox_Blue.setObjectName("horizontalBox_Blue")
        horizontalBox_Blue.addWidget(self.widblue)

        # horizontalBox_Red
        self.horizontalLayoutWidget_Red = QtWidgets.QWidget(self.colorTab)
        self.horizontalLayoutWidget_Red.setGeometry(QtCore.QRect(0, 160, 371, 31))
        self.horizontalLayoutWidget_Red.setObjectName("horizontalLayoutWidget_Red")
        horizontalBox_Red = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_Red)
        horizontalBox_Red.setContentsMargins(0, 0, 0, 0)
        horizontalBox_Red.setObjectName("horizontalBox_Red")
        horizontalBox_Red.addWidget(self.widred)

        # horizontalBox_Green
        self.horizontalLayoutWidget_Green = QtWidgets.QWidget(self.colorTab)
        self.horizontalLayoutWidget_Green.setGeometry(QtCore.QRect(0, 200, 371, 31))
        self.horizontalLayoutWidget_Green.setObjectName("horizontalLayoutWidget_Green")
        horizontalBox_Green = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_Green)
        horizontalBox_Green.setContentsMargins(0, 0, 0, 0)
        horizontalBox_Green.setObjectName("horizontalBox_Green")
        horizontalBox_Green.addWidget(self.widgreen)

        self.tabWidget.addTab(self.colorTab, "")

        ### Comment out if call from main form
        # ConfigForm.setCentralWidget(self.centralwidget)

        self.retranslateUi(ConfigForm)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(ConfigForm)

    def button_apply_event(self):
        print('your code here')
        return

    def changeValueRed(self, value):
        self.c.updateBW.emit(value)
        self.widred.repaint()
        self.textBrowser_red.append(str(value))

    def changeValueGreen(self, value):
        self.c.updateBW.emit(value)
        self.widgreen.repaint()
        self.textBrowser_green.append(str(value))

    def changeValueBlue(self, value):
        self.c.updateBW.emit(value)
        self.widblue.repaint()
        self.textBrowser_blue.append(str(value))

    def retranslateUi(self, ConfigForm):
        _translate = QtCore.QCoreApplication.translate
        ConfigForm.setWindowTitle(_translate("ConfigForm", "Configure"))
        self.label_blue.setText(_translate("ConfigForm", "<html><head/><body><p><span style=\" font-size:10pt; color:#0336ff;\">Blue:</span></p></body></html>"))
        self.label_green.setText(_translate("ConfigForm", "<html><head/><body><p><span style=\" font-size:10pt; color:#018786;\">Green:</span></p></body></html>"))
        self.label_red.setText(_translate("ConfigForm", "<html><head/><body><p><span style=\" font-size:10pt; color:#b00020;\">Red:</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.colorTab), _translate("ConfigForm", "Colors"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ConfigForm = QtWidgets.QMainWindow()
    ui = Ui_ConfigForm()
    ui.setupUi(ConfigForm)
    ConfigForm.show()
    sys.exit(app.exec_())
